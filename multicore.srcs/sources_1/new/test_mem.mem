@ 10000        // Jump to pc_init address
C3 // add r1, r0, r0 (i=0)
00
00
00
33 // add r2, r0, r0 (sum = 0)
01
00
00
13 // addi r4, r0, #4 (@A = 40000)
02
40
00
13 // slli r4, r4, #16
12
02
01
93 // addi r5, r0, #3 -- JUST TO TEST
02
30
00
93 // slli r7, r1, #2
93
20
00
33 // add r6, r4, r7 (@A + i)
03
72
00
83 // lw r3, @(r6) (r3 = A[i])
21
03
00
E3 // blt r1, r5, #-12 (i<128 -> iterate loop again)
CA
50
FE 
33 // add r2, r2, r3 (sum += A[i])
01
31
00
93 // addi r1, r1, #1 (i++)
80
10
00
@ 40000
00 // A[0]
00
00
00 
01 // A[1]
00
00
00 
02 // A[2]
00
00
00 
03 // A[3]
00
00
00 
04 // A[4]
00
00
00 
05 // A[5]
00
00
00 
06 // A[6]
00
00
00 
07 // A[7]
00
00
00
08 // A[8]
00
00
00  
09 // A[9]
00
00
00 
0A // A[10]
00
00
00 
0B // A[11]
00
00
00 
0C // A[12]
00
00
00 
0D // A[13]
00
00
00 
0E // A[14]
00
00
00 
0F // A[15]
00
00
00 
10 // A[16]
00
00
00 
11 // A[17]
00
00
00 
12 // A[18]
00
00
00 
13 // A[19]
00
00
00 
14 // A[20]
00
00
00 
15 // A[21]
00
00
00 
16 // A[22]
00
00
00 
17 // A[23]
00
00
00
18 // A[24]
00
00
00  
19 // A[25]
00
00
00 
1A // A[26]
00
00
00 
1B // A[27]
00
00
00 
1C // A[28]
00
00
00 
1D // A[29]
00
00
00 
1E // A[30]
00
00
00 
1F // A[31]
00
00
00 
20 // A[32]
00
00
00 
21 // A[33]
00
00
00 
22 // A[34]
00
00
00 
23 // A[35]
00
00
00 
24 // A[36]
00
00
00 
25 // A[37]
00
00
00 
26 // A[38]
00
00
00 
27 // A[39]
00
00
00
28 // A[40]
00
00
00  
29 // A[41]
00
00
00 
2A // A[42]
00
00
00 
2B // A[43]
00
00
00 
2C // A[44]
00
00
00 
2D // A[45]
00
00
00 
2E // A[46]
00
00
00 
2F // A[47]
00
00
00 
